{"remainingRequest":"/home/luke/code/vuetiful/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/luke/code/vuetiful/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/luke/code/vuetiful/node_modules/vue-loader/lib/index.js??ref--1-1!/home/luke/code/vuetiful/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/luke/code/vuetiful/docs/advanced/vuex-orm/index.md?vue&type=template&id=0994f0e4&","dependencies":[{"path":"/home/luke/code/vuetiful/docs/advanced/vuex-orm/index.md","mtime":1569996261744},{"path":"/home/luke/code/vuetiful/node_modules/cache-loader/dist/cjs.js","mtime":1562326401555},{"path":"/home/luke/code/vuetiful/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1562320200184},{"path":"/home/luke/code/vuetiful/node_modules/cache-loader/dist/cjs.js","mtime":1562326401555},{"path":"/home/luke/code/vuetiful/node_modules/vue-loader/lib/index.js","mtime":1562320200184},{"path":"/home/luke/code/vuetiful/node_modules/@vuepress/markdown-loader/index.js","mtime":1562326401496}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}